<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Frame Analysis</title>
    <link rel="stylesheet" href="/css/styles.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="/js/socket.js"></script>
    <script src="/js/frame_analysis.js" defer></script>
</head>
<body>
    <div id="app-container" 
        data-session-id="<%= session_id %>" 
        data-margin-top="50" 
        data-margin-left="50"
        data-margin-right="50"
        data-margin-bottom="50"
        data-video-title="<%= filename.split('/').pop() %>"
    ></div>

    <!-- Main Header Section -->
    <div class="container">
        <h1>Frame Annotation</h1>
        <h2>Video: <%= filename.split('/').pop() %></h2>
        
        <div class="instructions">
            <h3>Instructions:</h3>
            <p>1. Select a colored point from the buttons below.</p>
            <p>2. Click on the image where you want to place the point.</p>
            <p>3. Once all points are placed, click "Process Point Cloud".</p>
        </div>
    </div>

    <!-- Point Selection and Controls -->
    <div class="container">
        <h3>Point Selection</h3>
        <div class="point-controls">
            <div id="pointRed" class="point-button point-red" data-index="0" data-color="red">Circle 1</div>
            <div id="pointGreen" class="point-button point-green" data-index="1" data-color="green">Circle 2</div>
            <div id="pointBlue" class="point-button point-blue" data-index="2" data-color="blue">Circle 3</div>
        </div>

        <div class="point-controls">
            <h4>Circle Radius</h4>
            <div class="slider-container">
                <input type="range" min="0" max="500" value="50" class="slider" id="radiusRange">
                <button id="sendRadiusBtn" class="btn btn-action">Set Radius</button>
            </div>
            <div class="value-display">
                Value: <span id="radiusValue">50</span> pixels
            </div>
        </div>

        <div class="point-controls">
            <h4>Import Points</h4>
            <textarea id="pointsDataInput" rows="5" placeholder="Paste points data in JSON format here..."></textarea>
            <div class="controls">
                <button id="importPointsBtn" class="btn btn-action">Import Points</button>
            </div>
        </div>
    </div>

    <!-- Image Display -->
    <div class="container">
        <div class="plotly-container" id="plotly-container">
            <div id="plotlyDiv" style="width: <%= Math.min(800, width + 100) %>px; height: <%= Math.min(600, height + 100) %>px;"></div>
            <div id="plot-overlay"></div>
        </div>

        <div id="pointStatus" class="processing-status status-processing" style="display: none;">
            Select a point and click on the image to place it.
        </div>
    </div>

    <!-- Control Buttons -->
    <div class="container">
        <div class="controls">
            <a href="/video/<%= encodeURIComponent(filename) %>" class="btn btn-primary">Back to Video Player</a>
            <a href="/" class="btn btn-secondary">Back to Video Library</a>
            <button id="processPointCloud" class="btn btn-action" onclick="processVideoWithPoints()">Process Point Cloud</button>
            <button id="stopProcessing" class="btn btn-secondary" onclick="stopProcessing()" style="display: none; background-color: #dc3545; color: white;">Stop Processing</button>
            <button id="validationContinue" style="display: none;" class="btn btn-validation" onclick="sendValidationContinue()">Validate and Continue</button>
        </div>
    </div>


    <!-- Status and Logs -->
    <div id="processingStatus" class="processing-status">
        <span id="statusMessage"></span>
    </div>

    <div id="processingLogs" class="processing-logs" style="display: none;">
        <h3>Processing Logs</h3>
        <div class="log-container">
            <pre id="logContent" class="log-content"></pre>
        </div>
    </div>

    <!-- Timeline Section -->
    <div class="container">
        <div class="timeline">
            <h2>Tracking Timeline</h2>
            
            <div class="slider-container">
                <input type="range" min="0" max="4" value="0" class="slider" id="timelineSlider">
            </div>
            
            <div class="image-info">
                Frame <span id="imageNumber">0</span> of <span id="totalImages">0</span>
            </div>
            
            <div class="image-container">
                <img id="displayedImage" src="" alt="Selected image" style="width: 800px; height: 100%;">
            </div>
        </div>
    </div>

    <!-- Data Tables -->
    <div class="container">
        <div id="tracksData" style="display: flex;">
            <div id="validationData">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h2>Validated Points</h2>
                    <button class="btn btn-primary" onclick="copyValidationsToClipboard()">Copy Validations to Clipboard</button>
                </div>
                <div id="table-scroll">
                    <table id="validationTable">
                        <thead>
                            <tr>
                                <th><span class="text">Validated Points JSON</span></th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
            <div id="tracksAnnotation">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h2>Annotation Tracks</h2>
                    <button class="btn btn-primary" onclick="downloadTracksCSV()">Download CSV</button>
                </div>
                <div id="table-scroll">
                    <table id="tracksTable">
                        <thead>
                            <tr>
                                <th><span class="text">frame</span></th>
                                <th><span class="text">x</span></th>
                                <th><span class="text">y</span></th>
                                <th><span class="text">bodypart</span></th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Parameter Configuration -->
    <div class="container">
        <h2>Parameter Configuration</h2>
        
        <!-- Processing Duration -->
        <div class="point-controls">
            <h4>Video Processing Duration</h4>
            <div style="margin-left: 20px;">
                <div style="margin-bottom: 10px;">
                    <label>
                        <input type="radio" name="processing-option" value="seconds" id="specific-seconds" checked>
                        Process specific number of seconds
                    </label>
                </div>
                <div style="margin-left: 20px; margin-top: 10px;">
                    <input type="number" value="2" id="processing-time" disabled>
                    <span style="margin-left: 5px;">seconds</span>
                </div>
                <div style="margin-bottom: 10px;">
                    <label>
                        <input type="radio" name="processing-option" value="full" id="full-video">
                        Process full video
                    </label>
                </div>
                <p style="font-size: 14px; color: #666; margin-top: 15px;">
                    Choose to process the entire video or specify how many seconds to process at once
                </p>
            </div>
        </div>

        <!-- Core Parameters -->
        <div class="point-controls">
            <h4>Core Parameters</h4>
            
            <div style="margin-bottom: 15px;">
                <label style="display: flex; align-items: center; gap: 10px;">
                    <strong>Confidence Threshold:</strong>
                    <input type="number" value="0.7" id="confidence-threshold" style="width: 80px;">
                </label>
                <p style="margin-left: 20px; font-size: 14px; color: #666;">
                    Recommended not to change, but rather adjust the parameters below instead.
                </p>
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: flex; align-items: center; gap: 10px;">
                    <strong>Smoothing Alpha (α):</strong>
                    <input type="number" value="3" id="smoothing-alpha" style="width: 80px;">
                </label>
                <div style="margin-left: 20px; font-size: 14px; color: #666;">
                    <p>Balances raw TAPIR calculations and interpolation:</p>
                    <ul style="margin: 5px 0;">
                        <li><strong>α = 1:</strong> 50-50 split between raw tracks and interpolation</li>
                        <li><strong>α = 0:</strong> 100% interpolated tracks</li>
                        <li><strong>α > 1:</strong> More weight to raw mean</li>
                        <li><strong>α < 1:</strong> More weight to interpolation</li>
                    </ul>
                </div>
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: flex; align-items: center; gap: 10px;">
                    <strong>DBScan Epsilon (ε):</strong>
                    <input type="number" value="1" id="dbscan-epsilon" style="width: 80px;">
                </label>
                <div style="margin-left: 20px; font-size: 14px; color: #666;">
                    <p>Clustering parameter for outlier detection:</p>
                    <ul style="margin: 5px 0;">
                        <li><strong>Higher ε:</strong> Larger clusters, fewer outliers</li>
                        <li><strong>Lower ε:</strong> Smaller clusters, more outliers</li>
                    </ul>
                    <p><em>Change in small increments (0.1 or 0.25)</em></p>
                </div>
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: flex; align-items: center; gap: 10px;">
                    <strong>Deformity Delta (δ):</strong>
                    <input type="number" value="0.01" id="deformity-delta" style="width: 80px;">
                </label>
                <div style="margin-left: 20px; font-size: 14px; color: #666;">
                    <p>Deformity ratio calculation: Deformity / (r⁴ × δ)</p>
                    <ul style="margin: 5px 0;">
                        <li><strong>Higher δ:</strong> Lower deformity ratio, less likely to trigger validations</li>
                        <li><strong>Lower δ:</strong> Higher deformity ratio, more likely to trigger validations</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Algorithm Selection -->
        <div class="point-controls">
            <h4>Algorithm Selection</h4>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                <div>
                    <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <strong>Point Cloud Estimator:</strong>
                        <select id="point-cloud-estimator" style="flex: 1;">
                            <option value="tapir_estimator" selected>TAPIR Estimator</option>
                        </select>
                    </label>
                </div>

                <div>
                    <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <strong>Point Cloud Generator:</strong>
                        <select id="point-cloud-generator" style="flex: 1;">
                            <option value="singular_point_cloud_generator">Singular</option>
                            <option value="circular_point_cloud_generator" selected>Circular</option>
                        </select>
                    </label>
                </div>

                <div>
                    <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <strong>Inlier Predictor:</strong>
                        <select id="inlier-predictor" style="flex: 1;">
                            <option value="inlier_predictor_base">Base</option>
                            <option value="dbscan_inlier_predictor" selected>DBSCAN</option>
                            <option value="hdbscan_inlier_predictor">HDBSCAN</option>
                        </select>
                    </label>
                </div>

                <div>
                    <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <strong>Query Point Reconstructor:</strong>
                        <select id="query-point-reconstructor" style="flex: 1;">
                            <option value="query_point_reconstructor_base">Base</option>
                            <option value="inlier_weighted_avg_reconstructor" selected>Inlier Weighted Avg</option>
                            <option value="incremental_nn_reconstructor">Incremental NN</option>
                        </select>
                    </label>
                </div>

                <div>
                    <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <strong>Non-Validated Reconstructor:</strong>
                        <select id="point-cloud-non-validated-reconstructor" style="flex: 1;">
                            <option value="point_cloud_reconstructor_base">Base</option>
                            <option value="point_cloud_recons_inliers">Recons Inliers</option>
                            <option value="point_cloud_redraw_outliers">Redraw Outliers</option>
                            <option value="point_cloud_redraw_outliers_random" selected>Redraw Random</option>
                            <option value="point_cloud_cluster_recovery">Cluster Recovery</option>
                        </select>
                    </label>
                </div>

                <div>
                    <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <strong>Validated Reconstructor:</strong>
                        <select id="point-cloud-validated-reconstructor" style="flex: 1;">
                            <option value="point_cloud_reconstructor_base">Base</option>
                            <option value="point_cloud_recons_inliers">Recons Inliers</option>
                            <option value="point_cloud_redraw_outliers">Redraw Outliers</option>
                            <option value="point_cloud_redraw_outliers_random">Redraw Random</option>
                            <option value="point_cloud_cluster_recovery" selected>Cluster Recovery</option>
                        </select>
                    </label>
                </div>

                <div>
                    <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <strong>Weight Calc (Outliers):</strong>
                        <select id="weight-calculator-outliers" style="flex: 1;">
                            <option value="weight_calculator_outliers_penalty" selected>Outliers Penalty</option>
                        </select>
                    </label>
                </div>

                <div>
                    <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <strong>Weight Calc (Distances):</strong>
                        <select id="weight-calculator-distances" style="flex: 1;">
                            <option value="weight_calculator_distances_ewma" selected>Distances EWMA</option>
                            <option value="incremental_nn_weight_updater">Incremental NN</option>
                        </select>
                    </label>
                </div>
            </div>
        </div>
    </div>

    <!-- Session data and scripts -->
    <script>
        const SESSION_ID = "<%= session_id %>";
        const VIDEO_PATH = "<%= filename %>";
        const IMAGE_DATA = "<%= imageData %>";
        const IMAGE_WIDTH = parseInt("<%= width %>", 10);
        const IMAGE_HEIGHT = parseInt("<%= height %>", 10);
        window.appConfig = {
            imageWidth: IMAGE_WIDTH,
            imageHeight: IMAGE_HEIGHT
        };
        const decoded_points = '<%= points %>'
            .replace(/&#34;/g, '"')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, "'")
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&amp;/g, '&');
        const INITIAL_POINTS = JSON.parse(decoded_points) || [];

        // Radio button functionality
        const fullVideoRadio = document.getElementById('full-video');
        const specificSecondsRadio = document.getElementById('specific-seconds');
        const processingTimeInput = document.getElementById('processing-time');

        function updateInputState() {
            if (fullVideoRadio.checked) {
                processingTimeInput.disabled = true;
                processingTimeInput.style.opacity = '0.5';
            } else {
                processingTimeInput.disabled = false;
                processingTimeInput.style.opacity = '1';
                processingTimeInput.focus();
            }
        }

        fullVideoRadio.addEventListener('change', updateInputState);
        specificSecondsRadio.addEventListener('change', updateInputState);
        updateInputState();

        // Slider functionality
        const slider = document.getElementById("radiusRange");
        const output = document.getElementById("radiusValue");
        output.innerHTML = slider.value;
        slider.oninput = function() {
            output.innerHTML = this.value;
        }
        
        // Create the Plotly chart when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            createPlotlyChart();
        });

        socket.emit("start_new_session", {
            session_id: SESSION_ID,
            points: decoded_points,
            video_path: VIDEO_PATH,
            frame_width: IMAGE_WIDTH,
            frame_height: IMAGE_HEIGHT,
        });
        
        function ensureDataUrlFormat(imageData) {
            if (!imageData.startsWith('data:image')) {
                return `data:image/jpeg;base64,${imageData}`;
            }
            return imageData;
        }

        function pointToCircle(point) {
            return {
                type: "circle",
                xref: "x",
                yref: "y",
                x0: point["x"] - point["radius"],
                y0: point["y"] - point["radius"],
                x1: point["x"] + point["radius"],
                y1: point["y"] + point["radius"],
                line: {
                    color: point["color"]
                }
            }
        }

        function createPlotlyChart() {
            const appContainer = document.getElementById("app-container");
            const marginTop = appContainer.dataset.marginTop;
            const marginLeft = appContainer.dataset.marginLeft;
            const marginRight = appContainer.dataset.marginRight;
            const marginBottom = appContainer.dataset.marginBottom;

            const plotlyDiv = document.getElementById('plotlyDiv');
            const aspectRatio = IMAGE_WIDTH / IMAGE_HEIGHT;
            let width = 800;
            let height = width / aspectRatio;

            plotlyDiv.style.width = width + "px";
            plotlyDiv.style.height = height + "px";
            
            const figure = {
                layout: {
                    xaxis: {
                        range: [0, IMAGE_WIDTH],
                        title: 'X',
                        fixedrange: true,
                        showgrid: false
                    },
                    yaxis: {
                        range: [IMAGE_HEIGHT, 0],
                        title: 'Y',
                        fixedrange: true,
                        showgrid: false
                    },
                    images: [{
                        source: IMAGE_DATA,
                        x: 0,
                        y: 0,
                        sizex: IMAGE_WIDTH,
                        sizey: IMAGE_HEIGHT,
                        sizing: "stretch",
                        layer: 'below',
                        xref: 'x',
                        yref: 'y',
                    }],
                    showlegend: true,
                    dragmode: 'pan',
                    margin: {l: marginLeft, r: marginRight, b: marginBottom, t: marginTop},
                    title: 'First Frame Analysis',
                    template: 'plotly_white',
                    width: width,
                    height: height,
                    showlegend: true,
                    shapes: INITIAL_POINTS.map(pointToCircle)
                },
                config: {
                    displayModeBar: true,
                    staticPlot: false,
                    scrollZoom: false,
                    displaylogo: false,
                    modeBarButtonsToRemove: ['select2d', 'lasso2d', 'autoScale2d', 'resetScale2d']
                }
            };
            
            Plotly.newPlot(plotlyDiv, figure.data, figure.layout, figure.config);
            window.pointsData = INITIAL_POINTS;
        }
    </script>
</body>
</html>