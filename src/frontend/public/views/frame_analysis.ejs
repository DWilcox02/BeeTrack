<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Frame Analysis</title>
    <link rel="stylesheet" href="/css/styles.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="/js/socket.js"></script>
    <script src="/js/frame_analysis.js" defer></script>
</head>
<body>
    <div id="app-container" 
        data-session-id="<%= session_id %>" 
        data-margin-top="50" 
        data-margin-left="50"
        data-margin-right="50"
        data-margin-bottom="50"
        data-video-title="<%= filename.split('/').pop() %>"
    ></div>
    <div class="container">
        <h1>First Frame Analysis</h1>
        <h2>Video: <%= filename.split('/').pop() %></h2>
        
        
        <div class="instructions">
            <h3>Instructions:</h3>
            <p>1. Select a colored point from the buttons below.</p>
            <p>2. Click on the image where you want to place the point.</p>
            <p>3. Once all points are placed, click "Save Point Positions".</p>
        </div>
        <div class="point-controls">
            <h2>Parameter Adjustment</h2>
            <div>
                <h4 style="margin-inline: 10px;">Video Processing Duration</h4>
                <div style="margin-left: 20px;">
                    <div style="margin-bottom: 10px;">
                        <label>
                            <input type="radio" name="processing-option" value="seconds" id="specific-seconds" checked>
                            Process specific number of seconds
                        </label>
                    </div>

                    <div style="margin-left: 20px; margin-top: 10px;">
                        <input type="number" value="2" id="processing-time" disabled>
                        <span style="margin-left: 5px;">seconds</span>
                    </div>

                    <div style="margin-bottom: 10px;">
                        <label>
                            <input type="radio" name="processing-option" value="full" id="full-video">
                            Process full video
                        </label>
                    </div>
                    
                    
                </div>
                
                <div style="margin-left: 20px; margin-top: 15px;">
                    <p style="font-size: 14px; color: #666;">
                        Choose to process the entire video or specify how many seconds to process at once
                    </p>
                </div>
                <script>
                    const fullVideoRadio = document.getElementById('full-video');
                    const specificSecondsRadio = document.getElementById('specific-seconds');
                    const processingTimeInput = document.getElementById('processing-time');

                    function updateInputState() {
                        if (fullVideoRadio.checked) {
                            processingTimeInput.disabled = true;
                            processingTimeInput.style.opacity = '0.5';
                        } else {
                            processingTimeInput.disabled = false;
                            processingTimeInput.style.opacity = '1';
                            processingTimeInput.focus();
                        }
                    }

                    fullVideoRadio.addEventListener('change', updateInputState);
                    specificSecondsRadio.addEventListener('change', updateInputState);

                    // Initialize the state
                    updateInputState();
                </script>
            </div>

            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">Smoothing Alpha &#x03B1; = </h4>
                    <input type="number" value="1" id="smoothing-alpha">
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Smoothing is used to balance between raw TAPIR calculations and interpolation. 
                    <br>
                    <ul>
                        <li><b>&#x03B1; = 1</b> will result in a roughly <b>50-50 split</b> between raw mean tracks and interpolation.</li> 
                        <li><b>&#x03B1; &gt; 1</b> will give more weight to the <b>raw mean</b> than to the interpolation.</li>
                        <li><b>&#x03B1; &lt; 1</b> will give more weight to <b>interpolation</b> than the raw mean.</li>
                    </ul>
                    (<b>Note</b>: This is not the final output. All tracks and annotations (raw cloud prediction, interpolations, and smoothed tracks) will be available in the CSV file.)    
                    </p>
                </div>
            </div>
            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">DBScan (Clustering) Epsilon &#x03B5; = </h4>
                    <input type="number" value="1" id="dbscan-epsilon">
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Clustering helps determine confidence in the TAPIR predictions by predicting outliers. &#x03B5; represents how "close" predictions should be to each other before they are considered outliers.
                        <br>
                        &#x03B5; is just a coefficient, and is multiplied by the <b>radius</b> of a cloud during clustering. The default is &#x03B5; = 1.
                    <br>
                    <ul>
                        <li><b>Higher &#x03B5;</b> will result in larger (more confident) clusters and <b>fewer outliers</b>.</li> 
                        <li><b>Lower &#x03B5;</b> will result in smaller (less confident) clusters and <b>more outliers</b>.</li> 
                    </ul>
                    (Recommended to change in very small increments (e.g. by steps of 0.1 or 0.25))
                    </p>
                </div>            
            </div>
            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">Deformity Delta &#x03B4; = </h4>
                    <input type="number" value="0.01" id="deformity-delta">
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Used to calculate deformity ratio. Because deformity has no upper bound, a manual input is required.
                        <br>
                        &#x03B4; is just a coefficient, and is multiplied by the <b>radius</b> of a cloud when calculating deformity. The default is &#x03B4; = 0.01.
                        Deformity Ratio = Deformity / (r^4 * &#x03B4;).
                    <br>
                    <ul>
                        <li><b>Higher &#x03B4;</b> will result in lower deformity ratio (more confident) and will be <b>less likely</b> to trigger validations.</li> 
                        <li><b>Lower &#x03B4;</b> will result in higher deformity ratio (less confident) and will be <b>more likely</b> to trigger validations.</li> 
                    </ul>
                    </p>
                </div>            
            </div> 
            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">Point Cloud Estimator:</h4>
                    <select id="point-cloud-estimator">
                        <option value="tapir_estimator" selected>TAPIR Estimator</option>
                    </select>
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Selects the point cloud estimation algorithm to use for tracking points across frames.
                    </p>
                </div>
            </div>
            
            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">Point Cloud Generator:</h4>
                    <select id="point-cloud-generator">
                        <option value="singular_point_cloud_generator">Singular Point Cloud Generator</option>
                        <option value="circular_point_cloud_generator" selected>Circular Point Cloud Generator</option>
                    </select>
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Determines how point clouds are generated around the initial tracking points.
                        <br>
                        <ul>
                            <li><b>Singular:</b> Creates single-point clouds for precise tracking</li>
                            <li><b>Circular:</b> Creates circular point clouds around each tracking point</li>
                        </ul>
                    </p>
                </div>
            </div>
            
            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">Inlier Predictor:</h4>
                    <select id="inlier-predictor">
                        <option value="inlier_predictor_base">Base Inlier Predictor</option>
                        <option value="dbscan_inlier_predictor" selected>DBSCAN Inlier Predictor</option>
                        <option value="hdbscan_inlier_predictor">HDBSCAN Inlier Predictor</option>
                    </select>
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Determines which algorithm is used to identify inliers vs outliers in the point cloud predictions.
                        <br>
                        <ul>
                            <li><b>Base:</b> Simple baseline inlier detection</li>
                            <li><b>DBSCAN:</b> Density-based clustering for inlier detection</li>
                            <li><b>HDBSCAN:</b> Hierarchical density-based clustering</li>
                        </ul>
                    </p>
                </div>
            </div>
            
            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">Query Point Reconstructor:</h4>
                    <select id="query-point-reconstructor">
                        <option value="query_point_reconstructor_base">Base Query Point Reconstructor</option>
                        <option value="inlier_weighted_avg_reconstructor" selected>Inlier Weighted Average Reconstructor</option>
                        <option value="incremental_nn_reconstructor">Incremental NN Reconstructor</option>
                    </select>
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Determines how query points are reconstructed from the point cloud data.
                        <br>
                        <ul>
                            <li><b>Base:</b> Simple baseline reconstruction method</li>
                            <li><b>Inlier Weighted Average:</b> Uses weighted average of inlier points</li>
                            <li><b>Incremental NN:</b> Uses incremental nearest neighbor approach</li>
                        </ul>
                    </p>
                </div>
            </div>
            
            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">Point Cloud Non-Validated Reconstructor:</h4>
                    <select id="point-cloud-non-validated-reconstructor">
                        <option value="point_cloud_reconstructor_base">Base Point Cloud Reconstructor</option>
                        <option value="point_cloud_recons_inliers">Point Cloud Recons Inliers</option>
                        <option value="point_cloud_redraw_outliers">Point Cloud Redraw Outliers</option>
                        <option value="point_cloud_redraw_outliers_random" selected>Point Cloud Redraw Outliers Random</option>
                        <option value="point_cloud_cluster_recovery">Point Cloud Cluster Recovery</option>
                    </select>
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Handles reconstruction of point clouds that haven't been validated by the user.
                        <br>
                        <ul>
                            <li><b>Base:</b> Simple baseline reconstruction</li>
                            <li><b>Recons Inliers:</b> Reconstructs using only inlier points</li>
                            <li><b>Redraw Outliers:</b> Redraws outlier points systematically</li>
                            <li><b>Redraw Outliers Random:</b> Randomly redraws outlier points</li>
                            <li><b>Cluster Recovery:</b> Uses clustering to recover lost points</li>
                        </ul>
                    </p>
                </div>
            </div>
            
            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">Point Cloud Validated Reconstructor:</h4>
                    <select id="point-cloud-validated-reconstructor">
                        <option value="point_cloud_reconstructor_base">Base Point Cloud Reconstructor</option>
                        <option value="point_cloud_recons_inliers">Point Cloud Recons Inliers</option>
                        <option value="point_cloud_redraw_outliers">Point Cloud Redraw Outliers</option>
                        <option value="point_cloud_redraw_outliers_random">Point Cloud Redraw Outliers Random</option>
                        <option value="point_cloud_cluster_recovery" selected>Point Cloud Cluster Recovery</option>
                    </select>
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Handles reconstruction of point clouds that have been validated by the user.
                        <br>
                        <ul>
                            <li><b>Base:</b> Simple baseline reconstruction</li>
                            <li><b>Recons Inliers:</b> Reconstructs using only inlier points</li>
                            <li><b>Redraw Outliers:</b> Redraws outlier points systematically</li>
                            <li><b>Redraw Outliers Random:</b> Randomly redraws outlier points</li>
                            <li><b>Cluster Recovery:</b> Uses clustering to recover lost points</li>
                        </ul>
                    </p>
                </div>
            </div>
            
            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">Weight Calculator (Outliers):</h4>
                    <select id="weight-calculator-outliers">
                        <option value="weight_calculator_outliers_penalty" selected>Weight Calculator Outliers Penalty</option>
                    </select>
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Calculates weights for outlier points to determine their influence on the final tracking result.
                    </p>
                </div>
            </div>
            
            <div>
                <div style="display: flex;">
                    <h4 style="margin-inline: 10px;">Weight Calculator (Distances):</h4>
                    <select id="weight-calculator-distances">
                        <option value="weight_calculator_distances_ewma" selected>Weight Calculator Distances EWMA</option>
                        <option value="incremental_nn_weight_updater">Incremental NN Weight Updater</option>
                    </select>
                </div>
                <div style="margin-left: 20px;">
                    <p>
                        Calculates weights based on distances between points for tracking accuracy.
                        <br>
                        <ul>
                            <li><b>Distances EWMA:</b> Uses exponentially weighted moving average of distances</li>
                            <li><b>Incremental NN Weight Updater:</b> Updates weights incrementally using nearest neighbor</li>
                        </ul>
                    </p>
                </div>
            </div>           
        </div>        <div class="point-controls">
            <h3>Select point to place:</h3>
            <div id="pointRed" class="point-button point-red" data-index="0" data-color="red">Circle 1</div>
            <div id="pointGreen" class="point-button point-green" data-index="1" data-color="green">Circle 2</div>
            <div id="pointBlue" class="point-button point-blue" data-index="2" data-color="blue">Circle 3</div>
            <!-- <div id="pointPurple" class="point-button point-purple" data-index="3" data-color="purple">Circle 4</div> -->
        </div>
        <div class="point-controls">
            <h3>Import Points:</h3>
            <textarea id="pointsDataInput" rows="5" style="width: 100%; font-family: monospace;" placeholder="Paste points data in JSON format here..."></textarea>
            <div class="controls" style="margin-top: 10px;">
                <button id="importPointsBtn" class="btn btn-action">Import Points</button>
            </div>
        </div>
        <div>
            Circle Radius
            <div class="slider-container">
                <input type="range" min="0" max="500" value="50" class="slider" id="radiusRange">
                <button id="sendRadiusBtn" class="btn btn-action">Set Radius</button>
            </div>
            <div class="value-display">
                Value: <span id="radiusValue"></span> pixels
            </div>

            <script>
                var slider = document.getElementById("radiusRange")
                var output = document.getElementById("radiusValue")
                output.innerHTML = slider.value

                slider.oninput = function() {
                    output.innerHTML = this.value
                }
            </script>
        </div>        
        
        
        <div class="plotly-container" id="plotly-container">
            <!-- Plotly plot will be generated here by JavaScript -->
            <div id="plotlyDiv" style="width: <%= Math.min(800, width + 100) %>px; height: <%= Math.min(600, height + 100) %>px;"></div>
            <div id="plot-overlay"></div>
        </div>

        <div id="pointStatus" class="processing-status status-processing" style="display: none;">
            Select a point and click on the image to place it.
        </div>
        
        <div class="controls">
            <a href="/video/<%= encodeURIComponent(filename) %>" class="btn btn-primary">Back to Video Player</a>
            <a href="/" class="btn btn-secondary">Back to Video Library</a>
            <!-- <button id="savePlotlyPointsBtn" class="btn btn-action" onclick="savePoints()">Save Point Positions</button> -->
            <button id="processPointCloud" class="btn btn-action" onclick="processVideoWithPoints()">Process Point Cloud</button>
            <button id="stopProcessing" class="btn btn-secondary" onclick="stopProcessing()" style="display: none; background-color: #dc3545; color: white;">Stop Processing</button>
            <button id="validationContinue" style="display: none;" class="btn btn-validation" onclick="sendValidationContinue()">Validate and Continue</button>        
        </div>

        <div class="timeline">
            <h2>Tracking Timeline</h2>
            
            <div class="slider-container">
                <input type="range" min="0" max="4" value="0" class="slider" id="timelineSlider">
            </div>
            
            <div class="image-info">
                Frame <span id="imageNumber">0</span> of <span id="totalImages">0</span>
            </div>
            
            <div class="image-container">
                <img id="displayedImage" src="" alt="Selected image" style="width: 800px; height: 100%;">
            </div>

        </div>
    </div>

    <div id="processingStatus" class="processing-status">
        <span id="statusMessage"></span>
    </div>

    <div id="processingLogs" class="processing-logs" style="display: none;">
        <h3>Processing Logs</h3>
        <div class="log-container">
            <pre id="logContent" class="log-content"></pre>
        </div>
    </div>
     

    <div id="tracksData" style="display: flex;">
        <div id="validationData">
            <div style="display: flex;">
                <h2>Validated Points</h2>
                <button class="btn btn-primary" onclick="copyValidationsToClipboard()">Copy Validations to Clipboard</button>
            </div>
            <div id="table-scroll">
                <table id="validationTable">
                    <thead>
                        <tr>
                            <th><span class="text">Validated Points JSON</span></th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- <tr><td>blah</td></tr> -->
                    </tbody>
                </table>
            </div>
        </div>
        <div id="tracksAnnotation">
            <div style="display: flex;">
                <h2>Annotation Tracks</h2>
                <button class="btn btn-primary" onclick="downloadTracksCSV()">Download CSV</button>
            </div>
            <div id="table-scroll">
                <table id="tracksTable">
                    <thead>
                        <tr>
                            <th><span class="text">frame</span></th>
                            <th><span class="text">x</span></th>
                            <th><span class="text">y</span></th>
                            <th><span class="text">bodypart</span></th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- <tr> <td>blah</td> <td>blah</td> <td>blah</td> <td>blah</td> </tr> -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Session data for JavaScript -->
    <script>
        const SESSION_ID = "<%= session_id %>";
        const VIDEO_PATH = "<%= filename %>";
        const IMAGE_DATA = "<%= imageData %>";
        const IMAGE_WIDTH = parseInt("<%= width %>", 10);
        const IMAGE_HEIGHT = parseInt("<%= height %>", 10);
        window.appConfig = {
            imageWidth: IMAGE_WIDTH,
            imageHeight: IMAGE_HEIGHT
        };
        const decoded_points = '<%= points %>'
            .replace(/&#34;/g, '"')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, "'")
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&amp;/g, '&');
        const INITIAL_POINTS = JSON.parse(decoded_points) || [];

        
        // Create the Plotly chart when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            createPlotlyChart();
        });

        socket.emit("start_new_session", {
            session_id: SESSION_ID,
            points: decoded_points,
            video_path: VIDEO_PATH,
            frame_width: IMAGE_WIDTH,
            frame_height: IMAGE_HEIGHT,
        });
        
        function ensureDataUrlFormat(imageData) {
            // If the image data doesn't start with the data URL prefix, add it
            if (!imageData.startsWith('data:image')) {
                return `data:image/jpeg;base64,${imageData}`;
            }
            return imageData;
        }

        function pointToCircle(point) {
            return {
                type: "circle",
                xref: "x",
                yref: "y",
                x0: point["x"] - point["radius"],
                y0: point["y"] - point["radius"],
                x1: point["x"] + point["radius"],
                y1: point["y"] + point["radius"],
                line: {
                    color: point["color"]
                }
            }
        }

        function createPlotlyChart() {
            const appContainer = document.getElementById("app-container")
            const marginTop = appContainer.dataset.marginTop;
            const marginLeft = appContainer.dataset.marginLeft;
            const marginRight = appContainer.dataset.marginRight;
            const marginBottom = appContainer.dataset.marginBottom;


            const plotlyDiv = document.getElementById('plotlyDiv');

            // Set plot div size based on image aspect ratio
            const aspectRatio = IMAGE_WIDTH / IMAGE_HEIGHT;
            let width = 800; // pick a base width
            let height = width / aspectRatio;


            plotlyDiv.style.width = width + "px";
            plotlyDiv.style.height = height + "px";
            
            // Create a figure with the image and points
            const figure = {
                // data: [],
                layout: {
                    xaxis: {
                        range: [0, IMAGE_WIDTH],
                        title: 'X',
                        fixedrange: true,
                        showgrid: false
                    },
                    yaxis: {
                        range: [IMAGE_HEIGHT, 0], // Invert y-axis for image coordinates
                        title: 'Y',
                        // scaleanchor: 'x',
                        // scaleratio: 1,
                        fixedrange: true,
                        showgrid: false
                    },
                    images: [{
                        source: IMAGE_DATA,
                        x: 0,
                        y: 0,
                        sizex: IMAGE_WIDTH,
                        sizey: IMAGE_HEIGHT,
                        sizing: "stretch",
                        layer: 'below',
                        xref: 'x',
                        yref: 'y',
                    }],
                    showlegend: true,
                    dragmode: 'pan',
                    margin: {l: marginLeft, r: marginRight, b: marginBottom, t: marginTop},
                    title: 'First Frame Analysis',
                    template: 'plotly_white',
                    width: width,
                    height: height,
                    showlegend: true,
                    shapes: INITIAL_POINTS.map(pointToCircle)
                },
                config: {
                    displayModeBar: true,
                    staticPlot: false,
                    scrollZoom: false,
                    displaylogo: false,
                    modeBarButtonsToRemove: ['select2d', 'lasso2d', 'autoScale2d', 'resetScale2d']
                }
            };
            
            // Add each point as a scatter trace
            // if (Array.isArray(INITIAL_POINTS)) {
            //     INITIAL_POINTS.forEach(point => {
            //         figure.data.push({
            //             x: [point.x],
            //             y: [point.y],
            //             mode: 'markers',
            //             marker: {
            //                 size: 10,
            //                 color: point.color
            //             },
            //             name: `Point (${point.color})`
            //         });
            //     });
            // } else {
            //     console.error("INITIAL_POINTS is not an array:", INITIAL_POINTS);
            // }
            
            // Create the plot
            Plotly.newPlot(plotlyDiv, figure.data, figure.layout, figure.config);
            console.log(figure.layout.shapes)
            // Store points globally for use in the rest of the app
            window.pointsData = INITIAL_POINTS;
        }
    </script>
</body>
</html>